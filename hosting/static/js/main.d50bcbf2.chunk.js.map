{"version":3,"sources":["types/func/time.ts","store/UserPageStore.ts","store/StoreContext.tsx","store/MainPageStore.tsx","store/RepositoriesStore.ts","Components/InputUser/InputUser.tsx","Components/UserCard/UserCard.tsx","Pages/MainPage/MainPage.tsx","Components/UserInfoBlock/UserInfoBlock.tsx","Components/UserInfoBlock/UserMainInfoBlock/UserMainInfoBlock.tsx","Components/RepoCard/RepoCardInfo/RepoCardInfo.tsx","Components/RepoCard/RepoCard.tsx","Components/Repositories/Repositories.tsx","Pages/UserPage/UserPage.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["getTimeString","time","date","Date","year","getFullYear","month","getMonth","day","getDate","length","userPageStore","isLoaded","isExists","errorMessage","login","avatar_url","name","location","email","public_repos","public_gists","followers","following","blog","bio","created_at","updated_at","getUserData","url","fetch","response","status","json","userData","runInAction","catchErrorRosponse","console","warn","message","clearUserPage","this","userPageAnnotations","observable","action","bound","rootStore","mainPage","userValue","users","isLoadedUsers","errorInputMessage","getUsersFormHandler","event","preventDefault","getUsers","changeUserValue","target","value","a","then","res","items","makeObservable","userPage","repositories","repos","repos_count","getRepos","storeContext","createContext","StoreContext","children","Provider","useStore","store","useContext","Error","InputUser","observer","inputUserClasses","inputErrorClasses","push","className","onSubmit","join","type","placeholder","onChange","UserCard","user","style","width","src","alt","to","MainPage","map","id","fontSize","UserInfoBlock","data","title","stringData","startsWith","href","UserMainInfoBlock","RepoCardInfo","RepoCard","repo","description","language","forks","watchers","open_issues","html_url","Repositories","UserPage","props","userLogin","match","params","useEffect","lineHeight","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","app","StrictMode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d50bcbf2.chunk.js","sourcesContent":["export const getTimeString = (time: string): string => {\r\n    const date = new Date(time)\r\n    const year = date.getFullYear() + ''\r\n    let month = date.getMonth() + 1 + ''\r\n    let day = date.getDate() + ''  \r\n\r\n    if (month.length === 1) {\r\n        month = '0' + month\r\n    }\r\n\r\n    if (day.length === 1) {\r\n        day = '0' + day\r\n    } \r\n\r\n    return `${day}:${month}:${year}`\r\n}","import { runInAction } from 'mobx';\r\nimport { observable } from 'mobx';\r\nimport { action } from 'mobx';\r\nimport { GithubUserPage } from './../types/types';\r\nimport { makeObservable } from 'mobx';\r\nimport { getTimeString } from '../types/func/time';\r\n\r\nexport interface IUserPageStore extends GithubUserPage {\r\n    isLoaded: boolean\r\n    isExists: boolean | null\r\n    errorMessage: string\r\n    getUserData: (login: string) => void\r\n    clearUserPage: () => void\r\n    catchErrorRosponse: (status: number) => void\r\n}\r\n\r\nconst userPageStore: IUserPageStore = {\r\n    isLoaded: false,\r\n    isExists: null,\r\n    errorMessage: '',\r\n    login: '',\r\n    avatar_url: '',\r\n    name: '',\r\n    location: null,\r\n    email: null,\r\n    public_repos: 0,\r\n    public_gists: 0,\r\n    followers: 0,\r\n    following: 0,\r\n    blog: '',\r\n    bio: null,\r\n    created_at: '',\r\n    updated_at: '',\r\n    async getUserData(login) {\r\n        try {\r\n            const url = `https://api.github.com/users/${login}`\r\n            const response = await fetch(url)\r\n            if (response.status === 200) {\r\n                const userData: GithubUserPage = await response.json()\r\n                runInAction(() => {\r\n                    this.isExists = true\r\n                    this.errorMessage = ''\r\n                    this.login = userData.login\r\n                    this.avatar_url = userData.avatar_url\r\n                    this.name = userData.name\r\n                    this.location = userData.location\r\n                    this.email = userData.email\r\n                    this.public_repos = userData.public_repos\r\n                    this.public_gists = userData.public_gists\r\n                    this.followers = userData.followers\r\n                    this.following = userData.following\r\n                    this.blog = userData.blog\r\n                    this.bio = userData.bio\r\n                    this.created_at = getTimeString(userData.created_at)\r\n                    this.updated_at = getTimeString(userData.updated_at)\r\n                })\r\n            } else {\r\n                this.catchErrorRosponse(response.status)\r\n            }\r\n        } catch (e) {\r\n            console.warn(e.message)\r\n        }\r\n    },\r\n    catchErrorRosponse(status: number) {\r\n            if (status === 404) {\r\n                runInAction(() => {\r\n                    this.isExists = false\r\n                    this.errorMessage = 'Пользователь с таким логином не существует'\r\n                })\r\n            } else if (status === 403) {\r\n                runInAction(() => {\r\n                    this.errorMessage = 'Превышен лимит запросов, попробуйте позже'\r\n                })\r\n            } else {\r\n                runInAction(() => {\r\n                    this.errorMessage = 'Что-то пошло не так'\r\n                })\r\n            }\r\n    },\r\n    clearUserPage() {\r\n        this.isLoaded = false\r\n        this.isExists = false\r\n        this.errorMessage = ''\r\n        this.login = ''\r\n        this.avatar_url = ''\r\n        this.name = ''\r\n        this.location = null\r\n        this.email = null\r\n        this.public_repos = 0\r\n        this.public_gists = 0\r\n        this.followers = 0\r\n        this.following = 0\r\n        this.blog = ''\r\n        this.bio = null\r\n        this.created_at = ''\r\n        this.updated_at = ''\r\n    }\r\n}\r\n\r\nconst userPageAnnotations = {\r\n    isLoaded: observable,\r\n    isExists: observable,\r\n    errorMessage: observable,\r\n    login: observable,\r\n    avatar_url: observable,\r\n    name: observable,\r\n    location: observable,\r\n    email: observable,\r\n    public_repos: observable,\r\n    public_gists: observable,\r\n    followers: observable,\r\n    following: observable,\r\n    blog: observable,\r\n    bio: observable,\r\n    created_at: observable,\r\n    updated_at: observable,\r\n    getUserData: action.bound,\r\n    clearUserPage: action.bound,\r\n    catchErrorRosponse: action.bound\r\n}\r\n\r\n\r\nexport const UserPageStore = (): IUserPageStore => makeObservable(userPageStore, userPageAnnotations)","import React, { createContext, useContext } from 'react'\r\nimport { rootStoreType, StoreContextProps } from '../types/types'\r\nimport { MainPageStore, UserPageStore } from './index'\r\nimport { RepositoriesStore } from './RepositoriesStore'\r\n\r\nconst rootStore: rootStoreType = {\r\n    mainPage: new MainPageStore(),\r\n    userPage: UserPageStore(),\r\n    repositories: new RepositoriesStore()\r\n}\r\n\r\nconst storeContext = createContext<rootStoreType | null>(null)\r\n\r\nexport const StoreContext: React.FC<StoreContextProps> = ({children}) => {\r\n    return (\r\n        <storeContext.Provider value={rootStore}>\r\n            {children}\r\n        </storeContext.Provider>\r\n    )\r\n}\r\n\r\nexport const useStore = () => {\r\n    const store = useContext(storeContext)\r\n    if (store === null) {\r\n        throw new Error('You call useContext, but component has not context. Try use context.Provider component')\r\n    }\r\n    return store\r\n}\r\n","import { action, makeObservable, observable, runInAction } from \"mobx\"\r\nimport { GithubResponseType, GithubUserItem } from \"../types/types\"\r\n\r\nexport class MainPageStore {\r\n    userValue: string = ''\r\n    users: Array<GithubUserItem> = []\r\n    isLoadedUsers: boolean = false\r\n    errorInputMessage: string = ''\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            userValue: observable,\r\n            users: observable,\r\n            isLoadedUsers: observable,\r\n            errorInputMessage: observable,\r\n            getUsersFormHandler: action,\r\n            getUsers: action,\r\n            changeUserValue: action,\r\n        })\r\n    }\r\n\r\n    getUsersFormHandler: React.FormEventHandler = (event) => {\r\n        event.preventDefault()\r\n        this.getUsers()\r\n    }\r\n\r\n    changeUserValue: React.ChangeEventHandler<HTMLInputElement> = (event) => {\r\n        this.userValue = event.target.value\r\n        this.errorInputMessage = this.errorInputMessage ? '' : this.errorInputMessage\r\n    }\r\n\r\n    getUsers = async () => {\r\n        try {\r\n            if (this.userValue.length <= 0) {\r\n                this.errorInputMessage = 'Введите имя пользователя'\r\n            } else {\r\n                const url = `https://api.github.com/search/users?q=${this.userValue}&`\r\n                const response: GithubResponseType = await fetch(url).then(res => res.json())\r\n                const users = response.items\r\n                runInAction(() => {\r\n                    this.users = users\r\n                    this.isLoadedUsers = true\r\n                })\r\n            }\r\n        } catch (e) {\r\n            console.warn('Get users request error: ', e.message)\r\n        }\r\n    }\r\n}\r\n","import { GithubRepository } from './../types/types';\r\nimport { makeObservable, observable, runInAction, action } from 'mobx';\r\n\r\nexport class RepositoriesStore {\r\n    repos: GithubRepository[] = []\r\n    repos_count: number = 0\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            repos: observable,\r\n            repos_count: observable,\r\n            getRepos: action\r\n        })\r\n    }\r\n\r\n    getRepos = async (login: string) => {\r\n        try {\r\n            const url = `https://api.github.com/users/${login}/repos`\r\n            const response = await fetch(url)\r\n\r\n            if (response.status === 200) {  \r\n                const repos = await response.json()\r\n                runInAction(() => {\r\n                    this.repos = repos\r\n                    this.repos_count = repos.length\r\n                })\r\n\r\n            }\r\n\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react'\r\nimport React from 'react'\r\nimport { useStore } from '../../store/StoreContext'\r\n\r\nconst InputUser: React.FC<{}> = observer(() => {\r\n\r\n    const { mainPage } = useStore()\r\n\r\n    const inputUserClasses = ['form-control', 'form-control-lg']\r\n    const inputErrorClasses = ['']\r\n    if (mainPage.errorInputMessage) {\r\n        inputUserClasses.push('is-invalid')\r\n        inputErrorClasses.push('invalid-feedback')\r\n    }\r\n\r\n    return (\r\n        <form className=\"w-100 mb-5\" onSubmit={mainPage.getUsersFormHandler}>\r\n            <input \r\n                className={inputUserClasses.join(' ')}\r\n                type=\"text\" placeholder=\"Введите имя пользователя\"\r\n                onChange={mainPage.changeUserValue}\r\n                value={mainPage.userValue}\r\n            />\r\n            <div className={inputErrorClasses.join(' ')}>\r\n                {mainPage.errorInputMessage}\r\n            </div>\r\n            <input \r\n                type=\"submit\" \r\n                value=\"Найти\" \r\n                className=\"btn w-100 btn-success mt-3\"\r\n            />\r\n        </form>\r\n    )\r\n})\r\n\r\nexport default InputUser","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { GithubUserItem } from '../../types/types'\r\n\r\n\r\ntype UserCardProps = {\r\n    user: GithubUserItem\r\n}\r\nconst UserCard: React.FC<UserCardProps> = ({user}) => {\r\n\r\n    return (\r\n        <div className=\"card mb-5\" style={{width: '18rem'}}>\r\n            <img className=\"card-img-top\" src={user.avatar_url} alt=\"userAvatar\" />\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{user.login}</h5>\r\n                <Link to={`/userPage/${user.login}`} className=\"btn btn-primary\">Открыть профиль</Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserCard","import { observer } from 'mobx-react'\r\nimport React from 'react'\r\nimport InputUser from '../../Components/InputUser/InputUser'\r\nimport UserCard from '../../Components/UserCard/UserCard'\r\nimport { useStore } from '../../store/StoreContext'\r\n\r\n\r\n\r\nconst MainPage: React.FC<{}> = observer(() => {\r\n\r\n    const { mainPage } = useStore()\r\n\r\n    return (\r\n        <section>\r\n            <div className=\"container\">\r\n                <div className=\"row d-flex mt-3 justify-content-between\">\r\n\r\n                    <InputUser />\r\n                    {\r\n                        mainPage.isLoadedUsers\r\n                            ? mainPage.users.map(user => {\r\n                                return (\r\n                                    <UserCard \r\n                                        key={user.id}\r\n                                        user={user}\r\n                                    />\r\n                                )\r\n                            })\r\n                            : <div className=\"d-flex w-100\">\r\n                                <p \r\n                                    className=\"w-100 text-center text-success font-weight-bold\"\r\n                                    style={{fontSize: '24px'}}\r\n                                >\r\n                                    Данное приложение осуществляет поиск GitHub акаунтов по логину пользователя\r\n                                </p>\r\n                            </div>\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n})\r\n\r\nexport default MainPage","import React from 'react'\r\n\r\n\r\ntype UserInfoBlockProps = {\r\n    title: string\r\n    data: string | null | number\r\n}\r\nconst UserInfoBlock: React.FC<UserInfoBlockProps> = ({data, title}) => {\r\n    const stringData = data + ''\r\n    const isHidden = stringData === 'false' || stringData === 'null' || stringData === 'undefined' || stringData === ''\r\n\r\n    if (!isHidden) {\r\n        return (\r\n            <div className=\"d-flex w-100 p-3 mb-3 bg-light rounded shadow text-dark font-weight-bold\">\r\n                <p className=\"w-100 m-0\" style={{fontSize: '18px'}}>{title}: </p>\r\n                <p className=\"w-100 m-0 text-right\">\r\n                    {\r\n                        stringData.startsWith('http')\r\n                            ? <a href={stringData}>{stringData}</a>\r\n                            : stringData\r\n                    }\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n    return null\r\n}\r\n\r\nexport default UserInfoBlock","import React from 'react'\r\nimport { useStore } from '../../../store/StoreContext'\r\n\r\nconst UserMainInfoBlock: React.FC<{}> = () => {\r\n\r\n    const { userPage } = useStore()\r\n\r\n    return (\r\n        <div className=\"card col-5 px-0 mb-3\" style={{width: '18rem'}}>\r\n            <a href={`https://github.com/${userPage.login}`}>\r\n                <img className=\"card-img-top\" src={userPage.avatar_url} alt=\"userAvatar\" />\r\n            </a>\r\n            <div className=\"card-body px-3 py-2\">\r\n                {\r\n                    userPage.name \r\n                        ? <p className=\"card-text my-2 text-center font-weight-bold d-flex justify-content-between\">\r\n                            <span className=\"text-dark\">Name: </span>\r\n                            <span className=\"text-info\">{userPage.name}</span>\r\n                        </p>\r\n                        : null\r\n                }\r\n                {\r\n                    userPage.login \r\n                        ? <p className=\"card-text my-2 text-center font-weight-bold d-flex justify-content-between\">\r\n                            <span className=\"text-dark\">Login: </span>\r\n                            <span className=\"text-info\">{userPage.login}</span>\r\n                        </p>\r\n                        : null\r\n                }\r\n                <div className=\"text-center mt-3\">\r\n                    <a href={`https://github.com/${userPage.login}`} className=\"btn btn-primary\" target=\"new_blank\">\r\n                        Смотреть на GitHub\r\n                    </a>\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserMainInfoBlock","import { observer } from 'mobx-react'\r\nimport React from 'react'\r\n\r\ntype RepoCardInfoProps = {\r\n    title: string\r\n    data: string | null | number\r\n}\r\nconst RepoCardInfo: React.FC<RepoCardInfoProps> = observer(({title, data}) => {\r\n    const stringData = data + ''\r\n    const isHidden = stringData === 'false' || stringData === 'null' || stringData === 'undefined' || stringData === ''\r\n\r\n    if (!isHidden) {\r\n        return (\r\n            <div className=\"w-100 mb-2 bg-light shadow-sm rounded\">\r\n                <p className=\"mt-0 mb-1 font-weight-bold text-center\">{title}</p>\r\n                <p className=\"ml-1 card-text text-center\">{data}</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return null\r\n})\r\n\r\nexport default RepoCardInfo","import { observer } from 'mobx-react'\r\nimport React from 'react'\r\nimport { getTimeString } from '../../types/func/time'\r\nimport { GithubRepository } from '../../types/types'\r\nimport RepoCardInfo from './RepoCardInfo/RepoCardInfo'\r\n\r\ntype RepoCardProps = {\r\n    repo: GithubRepository\r\n}\r\nconst RepoCard: React.FC<RepoCardProps> = observer(({repo}) => {\r\n\r\n    return (\r\n        <div className=\"card mx-2 mb-3\" style={{width: '18rem'}}>\r\n            <div className=\"d-flex flex-column card-body\">\r\n                <h3 className=\"card-title text-success\">{repo.name}</h3>\r\n\r\n                    <RepoCardInfo \r\n                        title={'Описание'}\r\n                        data={repo.description}\r\n                    />\r\n\r\n                    <RepoCardInfo \r\n                        title={'Язык'}\r\n                        data={repo.language}\r\n                    />\r\n\r\n                    <RepoCardInfo \r\n                        title={'Создан'}\r\n                        data={getTimeString(repo.created_at)}\r\n                    />\r\n\r\n                    <RepoCardInfo \r\n                        title={'Обновлен'}\r\n                        data={getTimeString(repo.updated_at)}\r\n                    />\r\n\r\n                    <RepoCardInfo \r\n                        title={'Forks'}\r\n                        data={repo.forks}\r\n                    />\r\n\r\n                    <RepoCardInfo \r\n                        title={'Watchers'}\r\n                        data={repo.watchers}\r\n                    />\r\n\r\n                    <RepoCardInfo \r\n                        title={'Open Issues'}\r\n                        data={repo.open_issues}\r\n                    />\r\n\r\n\r\n                <a href={repo.html_url} className=\"btn btn-primary ml-auto mt-auto\" target=\"_blank\">Перейти к репозиторию</a>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default RepoCard","import { observer } from 'mobx-react'\r\nimport React from 'react'\r\nimport { useStore } from '../../store/StoreContext'\r\nimport RepoCard from '../RepoCard/RepoCard'\r\n\r\nconst Repositories: React.FC<{}> = observer(() => {\r\n    const { repositories } = useStore()\r\n    const repos_count = repositories.repos_count\r\n\r\n    return (\r\n        <div className=\"row py-4 bg-primary rounded\">\r\n            <div className=\"container\">\r\n                <div className=\"d-flex flex-wrap justify-content-around\">\r\n                    <p className=\"w-100 font-weight-bold text-white text-center\" style={{fontSize: '20px'}}>Список репозиториев</p>\r\n                    {\r\n                        repos_count\r\n                            ? repositories.repos.map(repo => (\r\n                                <RepoCard repo={repo} key={repo.id}/>\r\n                                )\r\n                            )\r\n                            : null\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Repositories","import { observer } from 'mobx-react'\r\nimport React, { useEffect } from 'react'\r\nimport { RouteComponentProps } from 'react-router'\r\nimport { Link } from 'react-router-dom'\r\nimport UserInfoBlock from '../../Components/UserInfoBlock/UserInfoBlock'\r\nimport UserMainInfoBlock from '../../Components/UserInfoBlock/UserMainInfoBlock/UserMainInfoBlock'\r\nimport Repositories from '../../Components/Repositories/Repositories'\r\nimport { useStore } from '../../store/StoreContext'\r\nimport './UserPage.scss'\r\n\r\ntype MatchParamsRouterProps = {\r\n    userLogin: string\r\n}\r\n\r\ninterface UserPageProps extends RouteComponentProps<MatchParamsRouterProps> {}\r\n\r\nconst UserPage: React.FC<UserPageProps> = observer((props) => {\r\n\r\n    const { userPage, repositories } = useStore()\r\n    const userLogin = props.match.params.userLogin\r\n\r\n    useEffect(() => {\r\n        userPage.getUserData(userLogin)\r\n        repositories.getRepos(userLogin)\r\n        return () => {\r\n            userPage.clearUserPage()\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Link className=\"btn btn-primary btn-lg btn-block mt-4 font-weight-bold\" to=\"/\">На Главную</Link>\r\n            {\r\n                userPage.isExists === true\r\n                    ? <div className=\"row d-flex flex-nowrap justify-content-around  align-items-start align-content-startmt-5 pt-3 px-3 my-4 text-white bg-primary rounded\">\r\n                        <div className=\"d-flex col-5 align-self-center flex-wrap align-items-start align-content-start\">\r\n        \r\n                            <UserInfoBlock \r\n                                title=\"Город\"\r\n                                data={userPage.location}\r\n                            />\r\n\r\n                            <UserInfoBlock \r\n                                title=\"Email\"\r\n                                data={userPage.email}\r\n                            />\r\n\r\n                            <UserInfoBlock \r\n                                title=\"Репозитории\"\r\n                                data={userPage.public_repos}\r\n                            />\r\n\r\n                            <UserInfoBlock \r\n                                title=\"Gists\"\r\n                                data={userPage.public_gists}\r\n                            />\r\n\r\n                            <UserInfoBlock \r\n                                title=\"Подписчики\"\r\n                                data={userPage.followers}\r\n                            />\r\n\r\n                            <UserInfoBlock \r\n                                title=\"Подписан\"\r\n                                data={userPage.following}\r\n                            />\r\n\r\n                            <UserInfoBlock \r\n                                title=\"Блог\"\r\n                                data={userPage.blog}\r\n                            />\r\n\r\n                            <UserInfoBlock \r\n                                title=\"Статус\"\r\n                                data={userPage.bio}\r\n                            />\r\n\r\n                            <UserInfoBlock \r\n                                title=\"Создан\"\r\n                                data={userPage.created_at}\r\n                            />\r\n\r\n                            <UserInfoBlock \r\n                                title=\"Обновлен\"\r\n                                data={userPage.updated_at}\r\n                            />\r\n        \r\n                        </div>\r\n    \r\n                        <UserMainInfoBlock />\r\n\r\n                    </div>\r\n                    : null\r\n            }\r\n            {\r\n                userPage.errorMessage\r\n                    ? <div className=\"d-flex\">\r\n                        <p className=\"w-100 text-center text-danger font-weight-bold\" style={{lineHeight: '80vh', fontSize: '26px'}}>{userPage.errorMessage}</p>\r\n                    </div>\r\n                    : null\r\n            }\r\n\r\n            <Repositories />\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default UserPage","\nimport { Redirect, Route, Switch } from 'react-router';\nimport './App.scss';\nimport MainPage from './Pages/MainPage/MainPage';\nimport UserPage from './Pages/UserPage/UserPage';\n \nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={MainPage}/>\n      <Route path=\"/userPage/:userLogin\" component={UserPage}/>\n      <Redirect to=\"/\" />\n    </Switch>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { StoreContext } from './store/StoreContext';\nimport { BrowserRouter } from \"react-router-dom\"\n\n\nconst app = (\n  <BrowserRouter>\n    <StoreContext>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </StoreContext> \n  </BrowserRouter>\n)\n\nReactDOM.render(app, document.getElementById('root'));\nreportWebVitals();\n"],"sourceRoot":""}